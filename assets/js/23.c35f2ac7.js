(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{302:function(a,s,t){a.exports=t.p+"assets/img/bubbleSort.b7d216a5.gif"},315:function(a,s,t){"use strict";t.r(s);var r=t(10),e=Object(r.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"_3-在linux上编写冒泡排序算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-在linux上编写冒泡排序算法"}},[a._v("#")]),a._v(" #3 - 在Linux上编写冒泡排序算法")]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("本文维护者")]),a._v(" "),s("ul",[s("li",[a._v("何懿聪 "),s("a",{attrs:{href:"mailto:heyicong@dragonos.org"}},[a._v("heyicong@dragonos.org")])])])]),a._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#_1-任务描述"}},[a._v("1. 任务描述")])]),s("li",[s("a",{attrs:{href:"#_2-任务一-了解排序"}},[a._v("2. 任务一：了解排序")])]),s("li",[s("a",{attrs:{href:"#_3-任务二-交换两个数"}},[a._v("3. 任务二：交换两个数")])]),s("li",[s("a",{attrs:{href:"#_4-任务三-循环结构"}},[a._v("4. 任务三：循环结构")])]),s("li",[s("a",{attrs:{href:"#_5-任务四-遍历"}},[a._v("5. 任务四：遍历")])]),s("li",[s("a",{attrs:{href:"#_6-任务五-冒泡排序"}},[a._v("6. 任务五：冒泡排序")])]),s("li",[s("a",{attrs:{href:"#_7-任务六-编写冒泡排序"}},[a._v("7. 任务六：编写冒泡排序")]),s("ul",[s("li",[s("a",{attrs:{href:"#_7-1-题目链接"}},[a._v("7.1 题目链接")])]),s("li",[s("a",{attrs:{href:"#_7-2-任务要求"}},[a._v("7.2 任务要求")])]),s("li",[s("a",{attrs:{href:"#_7-3-冒泡排序的性质"}},[a._v("7.3 冒泡排序的性质")])]),s("li",[s("a",{attrs:{href:"#_7-4-编写代码"}},[a._v("7.4 编写代码")])])])]),s("li",[s("a",{attrs:{href:"#_8-任务提示"}},[a._v("8. 任务提示")])])])]),s("p"),a._v(" "),s("h2",{attrs:{id:"_1-任务描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-任务描述"}},[a._v("#")]),a._v(" 1. 任务描述")]),a._v(" "),s("p",[a._v("你需要编写一个程序，实现冒泡排序算法，用于对一组整数进行升序排序。在完成任务之前，我们将逐步介绍排序的概念和相关编程知识。")]),a._v(" "),s("h2",{attrs:{id:"_2-任务一-了解排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-任务一-了解排序"}},[a._v("#")]),a._v(" 2. 任务一：了解排序")]),a._v(" "),s("ol",[s("li",[a._v("排序是将一组元素按照特定顺序重新排列的过程，常用的排序方式有升序（从小到大）和降序（从大到小）。")]),a._v(" "),s("li",[a._v("冒泡排序是一种简单的排序算法，基本思想是重复地遍历数组，每次比较相邻的两个元素，如果它们的顺序错误就交换位置，直到整个数组排序完成。")])]),a._v(" "),s("h2",{attrs:{id:"_3-任务二-交换两个数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-任务二-交换两个数"}},[a._v("#")]),a._v(" 3. 任务二：交换两个数")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("在编写冒泡排序之前，我们先来学习如何交换两个变量的值。")])]),a._v(" "),s("li",[s("p",[a._v("例如，如果有两个变量 "),s("code",[a._v("a")]),a._v(" 和 "),s("code",[a._v("b")]),a._v("，我们想要交换它们的值，可以使用一个临时变量 "),s("code",[a._v("temp")]),a._v(" 来辅助交换。")])]),a._v(" "),s("li",[s("p",[a._v("交换的过程如下：")]),a._v(" "),s("ul",[s("li",[a._v("将变量 "),s("code",[a._v("a")]),a._v(" 的值赋给 "),s("code",[a._v("temp")]),a._v("。")]),a._v(" "),s("li",[a._v("将变量 "),s("code",[a._v("b")]),a._v(" 的值赋给 "),s("code",[a._v("a")]),a._v("。")]),a._v(" "),s("li",[a._v("将 "),s("code",[a._v("temp")]),a._v(" 的值赋给 "),s("code",[a._v("b")]),a._v("。")])])])]),a._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("void swap(int& a, int& b){\n    int tmp = a;\n    a = b;\n    b = tmp;\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h2",{attrs:{id:"_4-任务三-循环结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-任务三-循环结构"}},[a._v("#")]),a._v(" 4. 任务三：循环结构")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("接下来，我们学习如何使用循环结构来重复执行一段代码。")])]),a._v(" "),s("li",[s("p",[a._v("在编程中，常用的循环结构有 "),s("code",[a._v("for")]),a._v(" 循环和 "),s("code",[a._v("while")]),a._v(" 循环。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("for")]),a._v(" 循环适用于已知重复次数的情况，而 "),s("code",[a._v("while")]),a._v(" 循环适用于未知重复次数的情况。")])]),a._v(" "),s("li",[s("p",[a._v("循环结构的基本语法如下：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("for循环：")]),a._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("for (初始化; 循环条件; 循环表达式) {\n    // 循环体代码\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])])]),a._v(" "),s("li",[s("p",[a._v("while循环：")]),a._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("while (条件) {\n    // 循环体代码\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])])])])])]),a._v(" "),s("h2",{attrs:{id:"_5-任务四-遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-任务四-遍历"}},[a._v("#")]),a._v(" 5. 任务四：遍历")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("现在，我们学习遍历这个概念。")])]),a._v(" "),s("li",[s("p",[a._v("首先，数组是一连串元素的表示，依次对数组（或者其他的数据结构）内的一系列元素均做一次访问叫做"),s("strong",[a._v("遍历")]),a._v("。")])]),a._v(" "),s("li",[s("p",[a._v("遍历通常会使用循环结构来实现")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("for循环示例")]),a._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("for(int i = 0; i < length; i++){\n    int num = arr[i]; // 假设有arr这样一个数组,获取到数组第i个元素\n    // 进行你想要的操作\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])])]),a._v(" "),s("li",[s("p",[a._v("while循环示例")]),a._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("int index = 0;\nwhile(index < length){\n    int num = arr[index]; // 假设有arr这样一个数组,获取到数组第i个元素\n    // 进行你想要的操作\n    // ...\n    // 操作完成\n    index ++ // 等价于index = index + 1\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])])])])])]),a._v(" "),s("h2",{attrs:{id:"_6-任务五-冒泡排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-任务五-冒泡排序"}},[a._v("#")]),a._v(" 6. 任务五：冒泡排序")]),a._v(" "),s("ol",[s("li",[a._v("现在，我们可以开始编写冒泡排序算法了。")]),a._v(" "),s("li",[a._v('冒泡排序（Bubble Sort）是一种简单直观的排序算法。它重复遍历要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢"浮"到数列的顶端。')]),a._v(" "),s("li",[a._v("图解:")])]),a._v(" "),s("p",[s("img",{attrs:{src:t(302),alt:"Bubble sort"}})]),a._v(" "),s("h2",{attrs:{id:"_7-任务六-编写冒泡排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-任务六-编写冒泡排序"}},[a._v("#")]),a._v(" 7. 任务六：编写冒泡排序")]),a._v(" "),s("h3",{attrs:{id:"_7-1-题目链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-题目链接"}},[a._v("#")]),a._v(" 7.1 题目链接")]),a._v(" "),s("p",[a._v("题目链接："),s("a",{attrs:{href:"https://leetcode.cn/problems/sort-an-array/",target:"_blank",rel:"noopener noreferrer"}},[a._v("912. 排序数组 - 力扣（LeetCode）"),s("OutboundLink")],1),a._v("（只需要测试过即可，因为使用冒泡排序这题会超时，提交会失败）")]),a._v(" "),s("h3",{attrs:{id:"_7-2-任务要求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-任务要求"}},[a._v("#")]),a._v(" 7.2 任务要求")]),a._v(" "),s("ol",[s("li",[a._v("现在，我们可以开始编写冒泡排序算法了。")]),a._v(" "),s("li",[a._v("首先，定义一个函数 "),s("code",[a._v("bubbleSort")]),a._v("，接受一个整数数组和数组长度作为参数。")]),a._v(" "),s("li",[a._v("在函数内部，使用嵌套的循环结构来实现冒泡排序：\n"),s("ul",[s("li",[a._v("外层循环控制遍历次数，需要遍历数组的长度减一次。")]),a._v(" "),s("li",[a._v("内层循环进行相邻元素的比较和交换：\n"),s("ul",[s("li",[a._v("对于升序：如果当前元素大于下一个元素，则交换它们的位置。降序相反")]),a._v(" "),s("li",[a._v("每完成一次内循环，对应区间最大（小）的一个元素将会落在最后，就类似气泡在水中上升的过程。")])])])])]),a._v(" "),s("li",[a._v("经过多次遍历后，整个数组将按升序（降序）排列。")])]),a._v(" "),s("h3",{attrs:{id:"_7-3-冒泡排序的性质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-冒泡排序的性质"}},[a._v("#")]),a._v(" 7.3 冒泡排序的性质")]),a._v(" "),s("h4",{attrs:{id:"稳定性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#稳定性"}},[a._v("#")]),a._v(" 稳定性")]),a._v(" "),s("p",[a._v("冒泡排序是一种稳定的排序算法。")]),a._v(" "),s("h4",{attrs:{id:"时间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[a._v("#")]),a._v(" 时间复杂度")]),a._v(" "),s("p",[a._v("在序列完全有序时，冒泡排序只需遍历一遍数组，不用执行任何交换操作，时间复杂度为O(n)。")]),a._v(" "),s("p",[a._v("在最坏情况下，冒泡排序要执行(n-1)n/2次交换操作，时间复杂度为 O(n^2^)。")]),a._v(" "),s("p",[a._v("冒泡排序的平均时间复杂度为O(n^2^)。")]),a._v(" "),s("h3",{attrs:{id:"_7-4-编写代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-编写代码"}},[a._v("#")]),a._v(" 7.4 编写代码")]),a._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("void bubbleSort(int arr[], int length){\n    // 排序操作\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h4",{attrs:{id:"输入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输入"}},[a._v("#")]),a._v(" 输入")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("arr")]),a._v("：一个整数数组，需要排序。")]),a._v(" "),s("li",[s("code",[a._v("length")]),a._v("：数组的长度。")])]),a._v(" "),s("h4",{attrs:{id:"输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输出"}},[a._v("#")]),a._v(" 输出")]),a._v(" "),s("ul",[s("li",[a._v("无返回值。函数将直接修改输入的数组，将其按升序进行排序。")])]),a._v(" "),s("h4",{attrs:{id:"测试示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试示例"}},[a._v("#")]),a._v(" 测试示例")]),a._v(" "),s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('int arr[] = {5, 2, 8, 1, 3};\nint length = sizeof(arr) / sizeof(arr[0]); //计算数组长度\nbubbleSort(arr, length);\nfor (int i = 0; i < length; i++) {\n    cout << arr[i] << " ";\n}\n// 输出: 1 2 3 5 8\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("h2",{attrs:{id:"_8-任务提示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-任务提示"}},[a._v("#")]),a._v(" 8. 任务提示")]),a._v(" "),s("ul",[s("li",[a._v("在编写代码之前，先理解任务书中的每个任务。")]),a._v(" "),s("li",[a._v("如果遇到困难，可以查阅相关资料或寻求我们的帮助。")]),a._v(" "),s("li",[a._v("在实现代码后，可以自己进行测试，遍历排序后的数组并输出来检查算法正确性，记录接触算法的感受。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);